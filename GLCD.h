#ifndef GLCD_H
#define GLCD_H

// Port and Pin defaults:

// Control Port
#ifndef GLCD_CTL_PORT
#define GLCD_CTL_PORT P6
#endif

#ifndef GLCD_CE
#define GLCD_CE BIT0
#endif

#ifndef GLCD_RST
#define GLCD_RST BIT6
#endif

#ifndef GLCD_DC
#define GLCD_DC BIT7
#endif

// SPI Port
#ifndef GLCD_SPI_PORT
#define GLCD_SPI_PORT P1
#endif

#ifndef GLCD_DIN
#define GLCD_DIN BIT6
#endif

#ifndef GLCD_CLK
#define GLCD_CLK BIT5
#endif

// Constants
#define GLCD_CHAR_W 6    // Character width
#define GLCD_WIDTH 84
#define GLCD_HEIGHT 48
#define GLCD_TAB_W 2

//Struct defs

/*
 * GLCD Character
 * Holds the pixel data required to draw a character on the display.
 * Pixels are stored in horizontally addressed bytes.
 *
 * bytes[i] is referenced like so:
 * i  =     0 1 2 3 4 5 6
 *
 * Bit 0    X X X X X X X
 * Bit 1    X X X X X X X
 * Bit 2    X X X X X X X
 * Bit 3    X X X X X X X
 * Bit 4    X X X X X X X
 * Bit 5    X X X X X X X
 * Bit 6    X X X X X X X
 * Bit 7    X X X X X X X
 */
struct GLCD_char {
    unsigned char bytes[GLCD_CHAR_W];
};

/*
 * GLCD Image
 * Holds the width, height, and pixel data for an image to be used in
 * the image drawing and processing functions.
 *
 * Width and height are measured in pixels.
 * Pixel data is stored in vertically addressed bytes.
 *
 * Given:
 * width = 2
 * height = 16
 *
 * bytes[i] is reference like so:
 *
 * Bit 0: i = 0: X i = 2: X
 * Bit 1:        X        X
 * Bit 2:        X        X
 * Bit 3:        X        X
 * Bit 4:        X        X
 * Bit 5:        X        X
 * Bit 6:        X        X
 * Bit 7:        X        X
 *
 * Bit 0: i = 1: X i = 3: X
 * Bit 1:        X        X
 * Bit 2:        X        X
 * Bit 3:        X        X
 * Bit 4:        X        X
 * Bit 5:        X        X
 * Bit 6:        X        X
 * Bit 7:        X        X
 */
struct GLCD_img {
    unsigned char width;
    unsigned char height;
    unsigned char bytes[(GLCD_WIDTH * (GLCD_HEIGHT / 8))];
};

//Driver Function defs
/*
 * Driver functions for the display. The directly control the display.
 */
void GLCD_init(void);
void GLCD_clear(void);
void GLCD_setCursor(unsigned char x, unsigned char y);
void GLCD_command_write(unsigned char byte);
void GLCD_data_write(unsigned char byte);
void SPI_write(unsigned char byte);

// text functions

/*
 * Int to String Convert
 * Converts the given integer into a string.
 */
int GLCD_itos(int num, char* output_buffer, int bufferSize);

/*
 * Print Character
 * Prints the given character to the screen using horizontal addressing.
 * The option argument allows the user to specify bold or underline
 * by entering 'b' or 'u' respectively. Otherwise, enter 0 for this
 * argument.
 *
 * Usage:
 * GLCD_print_char('[character]','b'|'u'|0);
 */
void GLCD_print_char(char character,char option);

/*
 * Print String
 * Prints the given string to the screen using horizontal addressing.
 * The option argument allows the user to specify bold or underline
 * by entering 'b' or 'u' respectively. Otherwise, enter 0 for this
 * argument.
 *
 * Usage:
 * GLCD_print_char("string",'b'|'u'|0);
 */
void GLCD_print_string(char* string,char option);

// The draw function

/*
 * Draw Image
 * Utilizes the driver functions to send the data for the given image to the screen
 * to be drawn with vertical addressing. The image can be offset in the X and Y direction by
 * any number of pixels both positive and negative. Pixels that end up off the screen
 * are not drawn.
 *
 * Usage:
 * GLCD_draw_image(x,y,&img);
 */
void GLCD_draw_image(int x, int y, struct GLCD_img * img);

// Image processing functions

/*
 * Draw Image Onto
 * This function is just a version of the "Process Image Onto" function. Functions the same as
 * GLCD_process_image_onto(x,y,&src_img,&dest_img, GLCD_ADD_ONTO);
 *
 * It adds the source image on top of the destination image using an OR operation.
 * Excess Pixels are trimmed.
 *
 * Usage:
 * GLCD_draw_image_onto(x,y,&src_img,&dest_img);
 */
void GLCD_draw_image_onto(int x, int y, struct GLCD_img * src_img, struct GLCD_img * dest_img);

/*
 * Remove Image
 * This function is also a version of the "Process Image Onto" function. Functions the same as:
 * GLCD_process_image_onto(x,y,&src_img,&dest_img,GLCD_REMOVE_FROM);
 *
 * It erases the pixels in the source image from the destination image.
 *
 * Usage:
 * GLCD_remove_image(x,y,&src_img,&dest_img);
 */
void GLCD_remove_image(int x, int y, struct GLCD_img * src_img, struct GLCD_img * dest_img);

/*
 * Clear Image
 * Erases all pixels in the given image
 *
 * Usage:
 * GLCD_clear_image(&img);
 */
void GLCD_clear_image(struct GLCD_img * img);

/*
 * Process Image Onto
 * Applies the given callback function between each pixel in the source image and the corresponding
 * pixel in the destination image. Some callbacks have already been defined for convenience below.
 * The source image may be offset in any direction relative to the destination image with 'x' and 'y'.
 * Any pixels that are outside the bounds of the destination image will be cut off.
 *
 * The callback function must accept pointers to two bytes, the destination byte and the source byte
 * respectively.
 * (Each byte represents 8 pixels, vertically stacked. Each bit in the byte represents a pixel)
 *
 * Usage:
 * GLCD_process_image(x,y,&src_img,&dest_img,&name_of_callback);
 */
void GLCD_process_image_onto(int x, int y, struct GLCD_img * src_img, struct GLCD_img * dest_img,
                             void (*callback) (unsigned char * dest_byte, unsigned char * src_byte));

/*
 * Process Image
 * Applies the given callback function to each pixel in a single image.
 * The callback function must accept a pointer to a byte, the byte being worked on.
 * Some singe image callbacks have been defined below for convenience.
 *
 * Usage:
 * GLCD_process_image(&img,&name_of_callback);
 */
void GLCD_process_image(struct GLCD_img * img, void (*callback) (unsigned char * img_byte));

/*******************************************
 * Combine Images
 * This function uses an OR operation to combine two images but does not
 * remove any of the excess pixels. The second image may be offset in the positive X and Y directions
 * This function returns a new image that is big enough for both images put together.
 *
 * Usage:
 * struct GLCD_img result = GLCD_combine_images(&img1,&img2,x,y);
 *******************************************/
struct GLCD_img GLCD_combine_images(struct GLCD_img * img1, struct GLCD_img * img2, unsigned char offset_x, unsigned char offset_y);

/*
 * Flatten Images
 * Same as Combine Images, but it does not create a new image. The destination image
 * is remade to fit both images.
 *
 * Usage:
 * GLCD_flatten_images(&dest_img,&img2);
 */
void GLCD_flatten_images(struct GLCD_img * dest_img, struct GLCD_img * img2);

/*
 * Generate Text Image
 * Generates an image of text from the given string.
 * The resulting image has the width and height specified by 'w' and 'h'.
 *
 * Text in the image will wrap in the x direction. Overflow in the y direction
 * is removed.
 *
 * Usage:
 * struct GLCD_img text = GLCD_gen_text("string");
 */
struct GLCD_img GLCD_gen_text_image(char* string,unsigned char w, unsigned char h);

/*
 * Generate Character Image
 * Generates an image of the given character. The image is 8 pixels tall and
 * has the same width as characters in the font (CHAR_W)
 *
 * Usage:
 * struct GLCD_img char_img = GLCD_gen_char_image('[character]');
 */
struct GLCD_img GLCD_gen_char_image(char c);


/*
 * Generate Rectangle Image
 * Generates an image of a rectangle with a given width and height.
 *
 * The "is_filled" parameter specifies whether the rectangle should be
 * filled or not.
 *
 * Usage:
 * struct GLCD_img rect_img = GLCD_gen_rect_image(width, height, is_filled (1 = yes, 0 = no))
 */
struct GLCD_img GLCD_gen_rect_image(unsigned char w, unsigned char h, unsigned char is_filled);

/*
 * Generate Circle Image
 * Generates and image of a circle with a given radius.
 *
 * The "is_filled" parameter specifies whether the circle is filled.
 *
 * Usage:
 * struct GLCD_img circle_img = GLCD_gen_circle_image(radius,is_filled (1 = yes, 0 = no))
 */
struct GLCD_img GLCD_gen_circle_image(unsigned char radius, float resolution, unsigned char is_filled);

/* ***********************************
 * Callbacks for Process Image Onto
 ************************************/
#define GLCD_ADD_ONTO (&GLCD_add_onto)
static void GLCD_add_onto(unsigned char * dest_byte, unsigned char * src_byte) {
    *dest_byte |= *src_byte;
}
#define GLCD_REMOVE_FROM (&GLCD_remove_from)
static void GLCD_remove_from(unsigned char * dest_byte, unsigned char * src_byte) {
    *dest_byte &= ~(*src_byte);
}
#define GLCD_NEGATIVE_ONTO (&GLCD_negative_onto)
static void GLCD_negative_onto(unsigned char * dest_byte, unsigned char * src_byte) {
    *dest_byte ^= *src_byte;
}
#define GLCD_REPLACE (&GLCD_replace)
static void GLCD_replace(unsigned char * dest_byte, unsigned char * src_byte) {
    *dest_byte = *src_byte;
}

/*********************************
 * Callbacks for Process Image
 ********************************/
#define GLCD_INVERT (&GLCD_invert)
static void GLCD_invert(unsigned char * img_byte) {
    *img_byte = ~(*img_byte);
}
#define GLCD_FILL (&GLCD_fill)
static void GLCD_fill(unsigned char * img_byte){
    *img_byte = 0xFF;
}
#define GLCD_ERASE (&GLCD_erase)
static void GLCD_erase(unsigned char * img_byte) {
    *img_byte = 0x00;
}


// Global defs
/*
 * Cursor X and Y
 * Keeps track of where the cursor currently is on the screen.
 * They are modified by the various screen functions given.
 */

unsigned char GLCD_get_cursor_x();
unsigned char GLCD_get_cursor_y();

/*
 * The font for characters printed to the screen.
 *
 * Contains definitions for all the pixels required to
 * draw each character in the ascii table on the screen.
 *
 * Character pixels are stored in horizontally addressed bytes.
 *
 * Unprintable or unsupported characters are drawn as a box.
 */
#if GLCD_CHAR_W == 7
static struct GLCD_char GLCD_font[256] =
{
 [0 ... 31] = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [' ']      = {.bytes = {0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
 ['!']      = {.bytes = {0x00,0x00,0x5F,0x00,0x00,0x00,0x00}},
 ['"']      = {.bytes = {0x00,0x07,0x00,0x07,0x00,0x00,0x00}},
 ['#']      = {.bytes = {0x24,0x7E,0x24,0x24,0x7E,0x24,0x00}},
 ['$']      = {.bytes = {0x24,0x4A,0xFF,0x52,0x24,0x00,0x00}},
 ['%']      = {.bytes = {0x62,0x35,0x1A,0x2C,0x56,0x23,0x00}},
 ['&']      = {.bytes = {0x34,0x4A,0x54,0x20,0x50,0x00,0x00}},
 ['\'']     = {.bytes = {0x00,0x00,0x07,0x00,0x00,0x00,0x00}},
 ['(']      = {.bytes = {0x00,0x3E,0x63,0x41,0x00,0x00,0x00}},
 [')']      = {.bytes = {0x00,0x41,0x63,0x3E,0x00,0x00,0x00}},
 ['*']      = {.bytes = {0x12,0x0C,0x3F,0x0C,0x12,0x00,0x00}},
 ['+']      = {.bytes = {0x10,0x10,0x7C,0x10,0x10,0x00,0x00}},
 [',']      = {.bytes = {0x00,0x80,0x60,0x00,0x00,0x00,0x00}},
 ['-']      = {.bytes = {0x10,0x10,0x10,0x10,0x10,0x00,0x00}},
 ['.']      = {.bytes = {0x00,0x00,0x40,0x00,0x00,0x00,0x00}},
 ['/']      = {.bytes = {0x60,0x30,0x18,0x0C,0x06,0x03,0x00}},
 ['0']      = {.bytes = {0x3C,0x62,0x5A,0x46,0x3C,0x00,0x00}},
 ['1']      = {.bytes = {0x00,0x44,0x7E,0x40,0x00,0x00,0x00}},
 ['2']      = {.bytes = {0x44,0x62,0x52,0x52,0x4C,0x00,0x00}},
 ['3']      = {.bytes = {0x24,0x42,0x4A,0x4A,0x34,0x00,0x00}},
 ['4']      = {.bytes = {0x18,0x14,0x12,0x7E,0x10,0x00,0x00}},
 ['5']      = {.bytes = {0x2E,0x4A,0x4A,0x4A,0x32,0x00,0x00}},
 ['6']      = {.bytes = {0x3C,0x4A,0x4A,0x4A,0x30,0x00,0x00}},
 ['7']      = {.bytes = {0x02,0x62,0x12,0x0A,0x06,0x00,0x00}},
 ['8']      = {.bytes = {0x34,0x4A,0x4A,0x4A,0x34,0x00,0x00}},
 ['9']      = {.bytes = {0x0C,0x52,0x52,0x52,0x3C,0x00,0x00}},
 [':']      = {.bytes = {0x00,0x00,0x28,0x00,0x00,0x00,0x00}},
 [';']      = {.bytes = {0x00,0x80,0x68,0x00,0x00,0x00,0x00}},
 ['<']      = {.bytes = {0x10,0x38,0x28,0x6C,0x44,0x00,0x00}},
 ['=']      = {.bytes = {0x00,0x28,0x28,0x28,0x28,0x00,0x00}},
 ['>']      = {.bytes = {0x44,0x6C,0x28,0x38,0x10,0x00,0x00}},
 ['?']      = {.bytes = {0x06,0x01,0x51,0x09,0x06,0x00,0x00}},
 ['@']      = {.bytes = {0x3C,0x42,0x5A,0x5A,0x52,0x1C,0x00}},
 ['A']      = {.bytes = {0x7C,0x12,0x11,0x11,0x12,0x7C,0x00}},
 ['B']      = {.bytes = {0x7F,0x49,0x49,0x49,0x49,0x36,0x00}},
 ['C']      = {.bytes = {0x3E,0x41,0x41,0x41,0x41,0x00,0x00}},
 ['D']      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x3E,0x00}},
 ['E']      = {.bytes = {0x7F,0x49,0x49,0x49,0x49,0x41,0x00}},
 ['F']      = {.bytes = {0x7F,0x09,0x09,0x09,0x09,0x01,0x00}},
 ['G']      = {.bytes = {0x3E,0x41,0x41,0x49,0x49,0x3A,0x00}},
 ['H']      = {.bytes = {0x7F,0x08,0x08,0x08,0x08,0x7F,0x00}},
 ['I']      = {.bytes = {0x41,0x41,0x7F,0x41,0x41,0x00,0x00}},
 ['J']      = {.bytes = {0x20,0x41,0x41,0x41,0x3F,0x00,0x00}},
 ['K']      = {.bytes = {0x7F,0x08,0x08,0x14,0x22,0x41,0x00}},
 ['L']      = {.bytes = {0x00,0x7F,0x40,0x40,0x40,0x00,0x00}},
 ['M']      = {.bytes = {0x7F,0x02,0x04,0x04,0x02,0x7F,0x00}},
 ['N']      = {.bytes = {0x7F,0x02,0x04,0x08,0x10,0x7F,0x00}},
 ['O']      = {.bytes = {0x3E,0x41,0x41,0x41,0x41,0x3E,0x00}},
 ['P']      = {.bytes = {0x7F,0x09,0x09,0x09,0x09,0x06,0x00}},
 ['Q']      = {.bytes = {0x3E,0x41,0x41,0x51,0x21,0x5E,0x00}},
 ['R']      = {.bytes = {0x7F,0x09,0x09,0x19,0x29,0x46,0x00}},
 ['S']      = {.bytes = {0x26,0x49,0x49,0x49,0x49,0x32,0x00}},
 ['T']      = {.bytes = {0x01,0x01,0x7F,0x01,0x01,0x00,0x00}},
 ['U']      = {.bytes = {0x3F,0x40,0x40,0x40,0x40,0x3F,0x00}},
 ['V']      = {.bytes = {0x03,0x0E,0x38,0x60,0x38,0x0E,0x03}},
 ['W']      = {.bytes = {0x07,0x1C,0x70,0x18,0x70,0x1C,0x07}},
 ['X']      = {.bytes = {0x63,0x14,0x08,0x08,0x14,0x63,0x00}},
 ['Y']      = {.bytes = {0x01,0x02,0x04,0x78,0x04,0x02,0x01}},
 ['Z']      = {.bytes = {0x61,0x51,0x49,0x49,0x45,0x43,0x00}},
 ['[']      = {.bytes = {0x00,0x7F,0x41,0x41,0x00,0x00,0x00}},
 ['\\']     = {.bytes = {0x03,0x06,0x0C,0x18,0x30,0x60,0x00}},
 [']']      = {.bytes = {0x00,0x41,0x41,0x7F,0x00,0x00,0x00}},
 ['^']      = {.bytes = {0x04,0x02,0x01,0x02,0x04,0x00,0x00}},
 ['_']      = {.bytes = {0x80,0x80,0x80,0x80,0x80,0x80,0x80}},
 ['`']      = {.bytes = {0x00,0x01,0x01,0x02,0x00,0x00,0x00}},
 ['a']      = {.bytes = {0x24,0x54,0x54,0x54,0x78,0x00,0x00}},
 ['b']      = {.bytes = {0x7F,0x44,0x44,0x44,0x38,0x00,0x00}},
 ['c']      = {.bytes = {0x38,0x44,0x44,0x44,0x44,0x00,0x00}},
 ['d']      = {.bytes = {0x38,0x44,0x44,0x44,0x7F,0x00,0x00}},
 ['e']      = {.bytes = {0x38,0x54,0x54,0x54,0x54,0x08,0x00}},
 ['f']      = {.bytes = {0x08,0x7E,0x09,0x01,0x02,0x00,0x00}},
 ['g']      = {.bytes = {0x54,0xAA,0xAA,0xAA,0x46,0x00,0x00}},
 ['h']      = {.bytes = {0x7F,0x08,0x08,0x08,0x70,0x00,0x00}},
 ['i']      = {.bytes = {0x00,0x48,0x7A,0x40,0x00,0x00,0x00}},
 ['j']      = {.bytes = {0x40,0x80,0x80,0x7A,0x00,0x00,0x00}},
 ['k']      = {.bytes = {0x7F,0x10,0x10,0x28,0x44,0x00,0x00}},
 ['l']      = {.bytes = {0x00,0x41,0x7F,0x40,0x00,0x00,0x00}},
 ['m']      = {.bytes = {0x78,0x04,0x78,0x04,0x78,0x00,0x00}},
 ['n']      = {.bytes = {0x7C,0x04,0x04,0x04,0x78,0x00,0x00}},
 ['o']      = {.bytes = {0x38,0x44,0x44,0x44,0x38,0x00,0x00}},
 ['p']      = {.bytes = {0xF8,0x28,0x28,0x28,0x10,0x00,0x00}},
 ['q']      = {.bytes = {0x10,0x28,0x28,0x28,0xF8,0x00,0x00}},
 ['r']      = {.bytes = {0x78,0x04,0x04,0x04,0x08,0x00,0x00}},
 ['s']      = {.bytes = {0x48,0x54,0x54,0x54,0x24,0x00,0x00}},
 ['t']      = {.bytes = {0x04,0x3F,0x44,0x40,0x20,0x00,0x00}},
 ['u']      = {.bytes = {0x3C,0x40,0x40,0x3C,0x40,0x00,0x00}},
 ['v']      = {.bytes = {0x0C,0x30,0x40,0x30,0x0C,0x00,0x00}},
 ['w']      = {.bytes = {0x3C,0x40,0x30,0x40,0x3C,0x00,0x00}},
 ['x']      = {.bytes = {0x44,0x28,0x10,0x28,0x44,0x00,0x00}},
 ['y']      = {.bytes = {0x1C,0xA0,0xA0,0xA0,0x7C,0x00,0x00}},
 ['z']      = {.bytes = {0x44,0x64,0x54,0x4C,0x44,0x00,0x00}},
 ['{']      = {.bytes = {0x08,0x36,0x41,0x41,0x00,0x00,0x00}},
 ['|']      = {.bytes = {0x00,0x00,0xFF,0x00,0x00,0x00,0x00}},
 ['}']      = {.bytes = {0x41,0x41,0x36,0x08,0x00,0x00,0x00}},
 ['~']      = {.bytes = {0x10,0x08,0x08,0x10,0x10,0x08,0x00}},
 [127]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [128]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [129]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [130]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [131]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [132]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [133]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [134]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [135]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [136]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [137]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [138]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [139]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [140]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [141]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [142]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [143]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [144]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [145]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [146]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [147]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [148]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [149]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [150]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [151]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [152]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [153]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [154]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [155]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [156]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [157]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [158]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [159]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [160]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [161]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [162]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [163]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [164]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [165]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [166]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [167]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [168]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [169]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [170]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [171]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [172]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [173]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [174]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [175]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [176]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [177]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [178]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [179]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [180]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [181]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [182]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [183]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [184]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [185]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [186]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [187]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [188]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [189]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [190]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [191]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [192]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [193]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [194]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [195]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [196]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [197]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [198]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [199]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [200]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [201]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [202]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [203]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [204]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [205]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [206]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [207]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [208]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [209]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [210]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [211]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [212]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [213]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [214]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [215]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [216]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [217]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [218]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [219]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [220]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [221]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [222]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [223]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [224]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [225]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [226]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [227]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [228]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [229]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [230]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [231]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [232]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [233]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [234]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [235]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [236]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [237]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [238]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [239]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [240]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [241]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [242]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [243]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [244]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [245]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [246]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [247]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [248]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [249]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [250]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [251]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [252]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [253]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [254]      = {.bytes = {0x7F,0x41,0x41,0x41,0x41,0x7F,0x00}},
 [255]      = {.bytes = {0x00,0x00,0x00,0x00,0x00,0x00,0x00}}
};

#elif GLCD_CHAR_W == 6

static struct GLCD_char GLCD_font[256] =
{
 [0 ... 31] = {.bytes = {0x7F,0x41,0x41,0x41,0x7F,0x00}},
 [' ']      = {.bytes = {0x00,0x00,0x00,0x00,0x00,0x00}},
 ['!']      = {.bytes = {0x00,0x00,0x5F,0x00,0x00,0x00}},
 ['"']      = {.bytes = {0x00,0x07,0x00,0x07,0x00,0x00}},
 ['#']      = {.bytes = {0x24,0x7E,0x24,0x7E,0x24,0x00}},
 ['$']      = {.bytes = {0x24,0x4A,0xFF,0x52,0x24,0x00}},
 ['%']      = {.bytes = {0x22,0x15,0x2A,0x54,0x22,0x00}},
 ['&']      = {.bytes = {0x34,0x4A,0x54,0x20,0x50,0x00}},
 ['\'']     = {.bytes = {0x00,0x00,0x07,0x00,0x00,0x00}},
 ['(']      = {.bytes = {0x00,0x3E,0x63,0x41,0x00,0x00}},
 [')']      = {.bytes = {0x00,0x41,0x63,0x3E,0x00,0x00}},
 ['*']      = {.bytes = {0x12,0x0C,0x3F,0x0C,0x12,0x00}},
 ['+']      = {.bytes = {0x10,0x10,0x7C,0x10,0x10,0x00}},
 [',']      = {.bytes = {0x00,0x80,0x60,0x00,0x00,0x00}},
 ['-']      = {.bytes = {0x10,0x10,0x10,0x10,0x10,0x00}},
 ['.']      = {.bytes = {0x00,0x00,0x40,0x00,0x00,0x00}},
 ['/']      = {.bytes = {0x60,0x30,0x18,0x0C,0x06,0x03}},
 ['0']      = {.bytes = {0x3C,0x62,0x5A,0x46,0x3C,0x00}},
 ['1']      = {.bytes = {0x00,0x44,0x7E,0x40,0x00,0x00}},
 ['2']      = {.bytes = {0x44,0x62,0x52,0x52,0x4C,0x00}},
 ['3']      = {.bytes = {0x24,0x42,0x4A,0x4A,0x34,0x00}},
 ['4']      = {.bytes = {0x18,0x14,0x12,0x7E,0x10,0x00}},
 ['5']      = {.bytes = {0x2E,0x4A,0x4A,0x4A,0x32,0x00}},
 ['6']      = {.bytes = {0x3C,0x4A,0x4A,0x4A,0x30,0x00}},
 ['7']      = {.bytes = {0x02,0x62,0x12,0x0A,0x06,0x00}},
 ['8']      = {.bytes = {0x34,0x4A,0x4A,0x4A,0x34,0x00}},
 ['9']      = {.bytes = {0x0C,0x52,0x52,0x52,0x3C,0x00}},
 [':']      = {.bytes = {0x00,0x00,0x28,0x00,0x00,0x00}},
 [';']      = {.bytes = {0x00,0x80,0x68,0x00,0x00,0x00}},
 ['<']      = {.bytes = {0x10,0x38,0x28,0x6C,0x44,0x00}},
 ['=']      = {.bytes = {0x00,0x28,0x28,0x28,0x28,0x00}},
 ['>']      = {.bytes = {0x44,0x6C,0x28,0x38,0x10,0x00}},
 ['?']      = {.bytes = {0x06,0x01,0x51,0x09,0x06,0x00}},
 ['@']      = {.bytes = {0x3C,0x42,0x5A,0x52,0x1C,0x00}},
 ['A']      = {.bytes = {0x7C,0x12,0x11,0x12,0x7C,0x00}},
 ['B']      = {.bytes = {0x7F,0x49,0x49,0x49,0x36,0x00}},
 ['C']      = {.bytes = {0x3E,0x41,0x41,0x41,0x22,0x00}},
 ['D']      = {.bytes = {0x7F,0x41,0x41,0x41,0x3E,0x00}},
 ['E']      = {.bytes = {0x7F,0x49,0x49,0x49,0x41,0x00}},
 ['F']      = {.bytes = {0x7F,0x09,0x09,0x09,0x01,0x00}},
 ['G']      = {.bytes = {0x3E,0x41,0x49,0x49,0x3A,0x00}},
 ['H']      = {.bytes = {0x7F,0x08,0x08,0x08,0x7F,0x00}},
 ['I']      = {.bytes = {0x41,0x41,0x7F,0x41,0x41,0x00}},
 ['J']      = {.bytes = {0x20,0x41,0x41,0x41,0x3F,0x00}},
 ['K']      = {.bytes = {0x7F,0x08,0x14,0x22,0x41,0x00}},
 ['L']      = {.bytes = {0x00,0x7F,0x40,0x40,0x40,0x00}},
 ['M']      = {.bytes = {0x7F,0x02,0x0C,0x02,0x7F,0x00}},
 ['N']      = {.bytes = {0x7F,0x06,0x0C,0x18,0x7F,0x00}},
 ['O']      = {.bytes = {0x3E,0x41,0x41,0x41,0x3E,0x00}},
 ['P']      = {.bytes = {0x7F,0x09,0x09,0x09,0x06,0x00}},
 ['Q']      = {.bytes = {0x3E,0x41,0x51,0x21,0x5E,0x00}},
 ['R']      = {.bytes = {0x7F,0x09,0x19,0x29,0x46,0x00}},
 ['S']      = {.bytes = {0x26,0x49,0x49,0x49,0x32,0x00}},
 ['T']      = {.bytes = {0x01,0x01,0x7F,0x01,0x01,0x00}},
 ['U']      = {.bytes = {0x3F,0x40,0x40,0x40,0x3F,0x00}},
 ['V']      = {.bytes = {0x07,0x18,0x60,0x18,0x07,0x00}},
 ['W']      = {.bytes = {0x3F,0x40,0x3C,0x40,0x3F,0x00}},
 ['X']      = {.bytes = {0x63,0x14,0x08,0x14,0x63,0x00}},
 ['Y']      = {.bytes = {0x03,0x04,0x78,0x04,0x03,0x00}},
 ['Z']      = {.bytes = {0x61,0x51,0x49,0x45,0x43,0x00}},
 ['[']      = {.bytes = {0x00,0x7F,0x41,0x41,0x00,0x00}},
 ['\\']     = {.bytes = {0x03,0x06,0x0C,0x18,0x30,0x60}},
 [']']      = {.bytes = {0x00,0x41,0x41,0x7F,0x00,0x00}},
 ['^']      = {.bytes = {0x04,0x02,0x01,0x02,0x04,0x00}},
 ['_']      = {.bytes = {0x80,0x80,0x80,0x80,0x80,0x00}},
 ['`']      = {.bytes = {0x00,0x01,0x01,0x02,0x00,0x00}},
 ['a']      = {.bytes = {0x24,0x54,0x54,0x54,0x78,0x00}},
 ['b']      = {.bytes = {0x7F,0x44,0x44,0x44,0x38,0x00}},
 ['c']      = {.bytes = {0x38,0x44,0x44,0x44,0x44,0x00}},
 ['d']      = {.bytes = {0x38,0x44,0x44,0x44,0x7F,0x00}},
 ['e']      = {.bytes = {0x38,0x54,0x54,0x54,0x54,0x08}},
 ['f']      = {.bytes = {0x08,0x7E,0x09,0x01,0x02,0x00}},
 ['g']      = {.bytes = {0x54,0xAA,0xAA,0xAA,0x46,0x00}},
 ['h']      = {.bytes = {0x7F,0x08,0x08,0x08,0x70,0x00}},
 ['i']      = {.bytes = {0x00,0x48,0x7A,0x40,0x00,0x00}},
 ['j']      = {.bytes = {0x40,0x80,0x80,0x7A,0x00,0x00}},
 ['k']      = {.bytes = {0x7F,0x10,0x10,0x28,0x44,0x00}},
 ['l']      = {.bytes = {0x00,0x41,0x7F,0x40,0x00,0x00}},
 ['m']      = {.bytes = {0x78,0x04,0x78,0x04,0x78,0x00}},
 ['n']      = {.bytes = {0x7C,0x04,0x04,0x04,0x78,0x00}},
 ['o']      = {.bytes = {0x38,0x44,0x44,0x44,0x38,0x00}},
 ['p']      = {.bytes = {0xF8,0x28,0x28,0x28,0x10,0x00}},
 ['q']      = {.bytes = {0x10,0x28,0x28,0x28,0xF8,0x00}},
 ['r']      = {.bytes = {0x78,0x04,0x04,0x04,0x08,0x00}},
 ['s']      = {.bytes = {0x48,0x54,0x54,0x54,0x24,0x00}},
 ['t']      = {.bytes = {0x04,0x3F,0x44,0x40,0x20,0x00}},
 ['u']      = {.bytes = {0x3C,0x40,0x40,0x3C,0x40,0x00}},
 ['v']      = {.bytes = {0x0C,0x30,0x40,0x30,0x0C,0x00}},
 ['w']      = {.bytes = {0x3C,0x40,0x30,0x40,0x3C,0x00}},
 ['x']      = {.bytes = {0x44,0x28,0x10,0x28,0x44,0x00}},
 ['y']      = {.bytes = {0x1C,0xA0,0xA0,0xA0,0x7C,0x00}},
 ['z']      = {.bytes = {0x44,0x64,0x54,0x4C,0x44,0x00}},
 ['{']      = {.bytes = {0x08,0x36,0x41,0x41,0x00,0x00}},
 ['|']      = {.bytes = {0x00,0x00,0xFF,0x00,0x00,0x00}},
 ['}']      = {.bytes = {0x41,0x41,0x36,0x08,0x00,0x00}},
 ['~']      = {.bytes = {0x10,0x08,0x08,0x10,0x10,0x08}},
 [127 ... 254] = {.bytes = {0x7F,0x41,0x41,0x41,0x7F,0x00}},
 [255]      = {.bytes = {0x00,0x00,0x00,0x00,0x00,0x00}}
};

#else

static struct GLCD_char GLCD_font[256] =
{
 [0 ... 255] = {.bytes = {0x7F,0x41,0x41,0x41,0x7F,0x00}}
}

#endif

#endif
